import React, { useState, useEffect } from 'react'
import {
  Card,
  Row,
  Col,
  List,
  Tag,
  Button,
  Space,
  Input,
  Select,
  Typography,
  Avatar,
  Divider,
  Badge,
  Tooltip,
  Modal,
  Spin
} from 'antd'
import {
  SearchOutlined,
  ReloadOutlined,
  EyeOutlined,
  HeartOutlined,
  ShareAltOutlined,
  BellOutlined,
  FilterOutlined,
  TrendingUpOutlined,
  FireOutlined,
  ClockCircleOutlined,
  ThunderboltOutlined
} from '@ant-design/icons'
import apiService from '../services/api'

const { Title, Text, Paragraph } = Typography
const { Option } = Select

// Êñ∞ÈóªÊé•Âè£ÂÆö‰πâ
interface NewsItem {
  id: string
  title: string
  summary: string
  content: string
  source: string
  author: string
  url: string
  publish_time: string
  category: string
  tags: string[]
  relevance: number
  stock_codes: string[]
  sentiment?: {
    label: string
    score: number
    confidence: number
  }
  created_at: string
  updated_at: string
}

interface NewsSource {
  id: string
  name: string
  type: string
  url: string
  enabled: boolean
  priority: number
  last_updated: string
  status: string
}

const NewsHub: React.FC = () => {
  const [news, setNews] = useState<NewsItem[]>([])
  const [sources, setSources] = useState<NewsSource[]>([])
  const [loading, setLoading] = useState(false)
  const [selectedCategory, setSelectedCategory] = useState<string>('all')
  const [selectedSource, setSelectedSource] = useState<string>('all')
  const [searchKeyword, setSearchKeyword] = useState('')
  const [selectedNews, setSelectedNews] = useState<NewsItem | null>(null)
  const [newsDetailVisible, setNewsDetailVisible] = useState(false)
  const [filterVisible, setFilterVisible] = useState(false)

  useEffect(() => {
    loadNews()
    loadSources()
  }, [])

  const loadNews = async (category: string = 'all', source: string = 'all', keyword: string = '') => {
    try {
      setLoading(true)

      // Ê®°ÊãüAPIË∞ÉÁî® - ÂÆûÈôÖÂ∫îËØ•Ë∞ÉÁî®ÂêéÁ´ØÊñ∞ÈóªÊúçÂä°
      const mockNews: NewsItem[] = [
        {
          id: 'news_001',
          title: 'Âπ≥ÂÆâÈì∂Ë°å2024Âπ¥‰∏öÁª©È¢ÑÂëäË∂ÖÈ¢ÑÊúüÔºåÂáÄÂà©Ê∂¶ÂêåÊØîÂ¢ûÈïø15%',
          summary: 'Âπ≥ÂÆâÈì∂Ë°åÂèëÂ∏É2024Âπ¥Â∫¶‰∏öÁª©È¢ÑÂëäÔºåÈ¢ÑËÆ°ÂÖ®Âπ¥ÂáÄÂà©Ê∂¶Â∞ÜÂêåÊØîÂ¢ûÈïø15%Â∑¶Âè≥Ôºå‰∏ªË¶ÅÂæóÁõä‰∫éÈõ∂ÂîÆ‰∏öÂä°Âø´ÈÄüÂèëÂ±ïÂíåËµÑ‰∫ßË¥®ÈáèÊåÅÁª≠ÊîπÂñÑ„ÄÇ',
          content: 'Âπ≥ÂÆâÈì∂Ë°å‰ªäÊó•ÊôöÈó¥ÂèëÂ∏É2024Âπ¥Â∫¶‰∏öÁª©È¢ÑÂëäÔºåÈ¢ÑËÆ°ÂÖ®Âπ¥ÂáÄÂà©Ê∂¶Â∞ÜÂêåÊØîÂ¢ûÈïø15%Â∑¶Âè≥ÔºåË∂ÖÂá∫Â∏ÇÂú∫È¢ÑÊúü„ÄÇÂÖ¨ÂëäÊòæÁ§∫Ôºå‰∏öÁª©Â¢ûÈïø‰∏ªË¶ÅÂæóÁõä‰∫éÈõ∂ÂîÆ‰∏öÂä°Âø´ÈÄüÂèëÂ±ïÂíåËµÑ‰∫ßË¥®ÈáèÊåÅÁª≠ÊîπÂñÑ„ÄÇÊà™Ëá≥2024Âπ¥Êú´ÔºåÂπ≥ÂÆâÈì∂Ë°åËµÑ‰∫ßÊÄªÈ¢ùÁ™ÅÁ†¥5‰∏á‰∫øÂÖÉÔºå‰∏çËâØË¥∑Ê¨æÁéáÊéßÂà∂Âú®1.5%‰ª•ÂÜÖ„ÄÇÈõ∂ÂîÆ‰∏öÂä°Êî∂ÂÖ•Âç†ÊØîÊèêÂçáËá≥55%ÔºåÊï∞Â≠óÂåñËΩ¨ÂûãÊàêÊïàÊòæËëó„ÄÇ',
          source: '‰∏úÊñπË¥¢ÂØå',
          author: 'Ë¥¢ÁªèËÆ∞ËÄÖ',
          url: 'https://news.example.com/news001',
          publish_time: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
          category: 'Ë¥¢Áªè',
          tags: ['Èì∂Ë°å', '‰∏öÁª©È¢ÑÂëä', 'Âπ≥ÂÆâÈì∂Ë°å'],
          relevance: 0.95,
          stock_codes: ['000001'],
          sentiment: {
            label: 'positive',
            score: 0.75,
            confidence: 0.85
          },
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        },
        {
          id: 'news_002',
          title: 'AËÇ°‰∏âÂ§ßÊåáÊï∞ÈõÜ‰ΩìÊî∂Ê∂®ÔºåÊñ∞ËÉΩÊ∫êÊ±ΩËΩ¶ÊùøÂùóÈ¢ÜÊ∂®',
          summary: '‰ªäÊó•AËÇ°‰∏âÂ§ßÊåáÊï∞ÈõÜ‰ΩìÊî∂Ê∂®Ôºå‰∏äËØÅÊåáÊï∞Ê∂®1.2%ÔºåÊ∑±ËØÅÊàêÊåáÊ∂®1.5%ÔºåÂàõ‰∏öÊùøÊåáÊ∂®1.8%„ÄÇÊñ∞ËÉΩÊ∫êÊ±ΩËΩ¶ÊùøÂùóË°®Áé∞Á™ÅÂá∫ÔºåÂ§öÂè™‰∏™ËÇ°Ê∂®ÂÅú„ÄÇ',
          content: '‰ªäÊó•AËÇ°Â∏ÇÂú∫Ë°®Áé∞Âº∫Âä≤Ôºå‰∏âÂ§ßÊåáÊï∞ÈõÜ‰ΩìÊî∂Ê∂®„ÄÇ‰∏äËØÅÊåáÊï∞Êî∂ÁõòÊä•3089ÁÇπÔºå‰∏äÊ∂®1.2%ÔºõÊ∑±ËØÅÊàêÊåáÊî∂ÁõòÊä•10245ÁÇπÔºå‰∏äÊ∂®1.5%ÔºõÂàõ‰∏öÊùøÊåáÊî∂ÁõòÊä•1958ÁÇπÔºå‰∏äÊ∂®1.8%„ÄÇË°å‰∏öÊùøÂùóÊñπÈù¢ÔºåÊñ∞ËÉΩÊ∫êÊ±ΩËΩ¶„ÄÅÂçäÂØº‰Ωì„ÄÅÂÜõÂ∑•Á≠âÊùøÂùóÊ∂®ÂπÖÂ±ÖÂâçÔºåÈì∂Ë°å„ÄÅÊàøÂú∞‰∫ßÁ≠â‰º†ÁªüÊùøÂùóÁõ∏ÂØπÂº±Âäø„ÄÇÂ∏ÇÂú∫Êàê‰∫§ÈáèÊòéÊòæÊîæÂ§ßÔºåÊ≤™Ê∑±‰∏§Â∏ÇÊàê‰∫§È¢ùÁ™ÅÁ†¥8000‰∫øÂÖÉ„ÄÇ',
          source: 'ÂêåËä±È°∫',
          author: 'ËÇ°Â∏ÇÂàÜÊûêÂ∏à',
          url: 'https://news.example.com/news002',
          publish_time: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),
          category: 'ËÇ°Â∏Ç',
          tags: ['AËÇ°', 'ÊåáÊï∞', 'Êñ∞ËÉΩÊ∫êÊ±ΩËΩ¶'],
          relevance: 0.88,
          stock_codes: [],
          sentiment: {
            label: 'positive',
            score: 0.65,
            confidence: 0.80
          },
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        },
        {
          id: 'news_003',
          title: 'üî• ÁÉ≠Èó®ËØùÈ¢òÔºöÁßëÊäÄËÇ°ÈõÜ‰Ωì‰∏äÊ∂®ÔºåAIÊ¶ÇÂøµËÇ°ÁàÜÂèë',
          summary: 'Âú®2Â∞èÊó∂ÊúüÈó¥ÔºåÂÖ±ÂèëÁé∞5Êù°Áõ∏ÂÖ≥Êñ∞ÈóªÔºöÁßëÊäÄËÇ°Ë°®Áé∞Âº∫ÂäøÔºå‰∫∫Â∑•Êô∫ËÉΩ„ÄÅËäØÁâá„ÄÅËΩØ‰ª∂Á≠âÁªÜÂàÜÈ¢ÜÂüüÂÖ®Èù¢ÂºÄËä±ÔºåÂ§öÂè™‰∏™ËÇ°Ê∂®ÂÅú„ÄÇ',
          content: 'ÁÉ≠Èó®ËØùÈ¢òËØ¶ÊÉÖÔºö\n\n1. ÁßëÊäÄËÇ°ÈõÜ‰Ωì‰∏äÊ∂®ÔºåAIÊ¶ÇÂøµËÇ°ÁàÜÂèë\n   Êù•Ê∫êÔºö‰∏úÊñπË¥¢ÂØå\n   Êó∂Èó¥Ôºö14:30\n   ÊëòË¶ÅÔºöÂèóÂà©Â•ΩÊ∂àÊÅØÂà∫ÊøÄÔºå‰∫∫Â∑•Êô∫ËÉΩÊ¶ÇÂøµËÇ°ÈõÜ‰ΩìÁàÜÂèëÔºåÂ§öÂè™‰∏™ËÇ°Ê∂®ÂÅú„ÄÇ\n\n2. ÂçäÂØº‰ΩìÊùøÂùóÂº∫ÂäøÂ¥õËµ∑\n   Êù•Ê∫êÔºöÂêåËä±È°∫\n   Êó∂Èó¥Ôºö14:15\n   ÊëòË¶ÅÔºöÂçäÂØº‰ΩìÊùøÂùóË°®Áé∞Âº∫ÂäøÔºåËäØÁâáËÆæËÆ°„ÄÅÂà∂ÈÄ†Á≠âÂ≠êÊùøÂùóÂÖ®Á∫ø‰∏äÊ∂®„ÄÇ\n\n3. ËΩØ‰ª∂ÊúçÂä°ÊùøÂùóË°®Áé∞Ê¥ªË∑É\n   Êù•Ê∫êÔºöÊñ∞Êµ™Ë¥¢Áªè\n   Êó∂Èó¥Ôºö14:00\n   ÊëòË¶ÅÔºöËΩØ‰ª∂ÊúçÂä°ÊùøÂùóË°®Áé∞Ê¥ªË∑ÉÔºå‰∫ëËÆ°ÁÆó„ÄÅÂ§ßÊï∞ÊçÆÁ≠âÁªÜÂàÜÈ¢ÜÂüüÊ∂®ÂπÖÂ±ÖÂâç„ÄÇ',
          source: 'Êô∫ËÇ°ÈÄöËÅöÂêà',
          author: 'Á≥ªÁªüËá™Âä®ËÅöÂêà',
          url: '',
          publish_time: new Date().toISOString(),
          category: 'ÁÉ≠Èó®ËØùÈ¢ò',
          tags: ['ÁÉ≠Èó®ËØùÈ¢ò', 'ËÅöÂêà', 'Ë∂ãÂäø'],
          relevance: 1.0,
          stock_codes: ['000001', '000002', '600036'],
          sentiment: {
            label: 'trending',
            score: 0.0,
            confidence: 0.8
          },
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        }
      ]

      // Â∫îÁî®Á≠õÈÄâÊù°‰ª∂
      let filteredNews = mockNews

      if (category !== 'all') {
        filteredNews = filteredNews.filter(item => item.category === category)
      }

      if (source !== 'all') {
        filteredNews = filteredNews.filter(item => item.source === source)
      }

      if (keyword) {
        filteredNews = filteredNews.filter(item =>
          item.title.includes(keyword) ||
          item.summary.includes(keyword) ||
          item.tags.some(tag => tag.includes(keyword))
        )
      }

      setNews(filteredNews)
    } catch (error) {
      console.error('Âä†ËΩΩÊñ∞ÈóªÂ§±Ë¥•:', error)
    } finally {
      setLoading(false)
    }
  }

  const loadSources = async () => {
    try {
      // Ê®°ÊãüÊñ∞ÈóªÊ∫êÊï∞ÊçÆ
      const mockSources: NewsSource[] = [
        {
          id: 'east_money',
          name: '‰∏úÊñπË¥¢ÂØå',
          type: 'website',
          url: 'https://www.eastmoney.com',
          enabled: true,
          priority: 1,
          last_updated: new Date().toISOString(),
          status: 'active'
        },
        {
          id: 'tonghuashun',
          name: 'ÂêåËä±È°∫',
          type: 'website',
          url: 'https://www.10jqka.com.cn',
          enabled: true,
          priority: 2,
          last_updated: new Date().toISOString(),
          status: 'active'
        },
        {
          id: 'sina',
          name: 'Êñ∞Êµ™Ë¥¢Áªè',
          type: 'website',
          url: 'https://finance.sina.com.cn',
          enabled: true,
          priority: 3,
          last_updated: new Date().toISOString(),
          status: 'active'
        },
        {
          id: 'tencent',
          name: 'ËÖæËÆØË¥¢Áªè',
          type: 'website',
          url: 'https://finance.qq.com',
          enabled: true,
          priority: 4,
          last_updated: new Date().toISOString(),
          status: 'active'
        }
      ]
      setSources(mockSources)
    } catch (error) {
      console.error('Âä†ËΩΩÊñ∞ÈóªÊ∫êÂ§±Ë¥•:', error)
    }
  }

  const handleSearch = (value: string) => {
    setSearchKeyword(value)
    loadNews(selectedCategory, selectedSource, value)
  }

  const handleCategoryChange = (category: string) => {
    setSelectedCategory(category)
    loadNews(category, selectedSource, searchKeyword)
  }

  const handleSourceChange = (source: string) => {
    setSelectedSource(source)
    loadNews(selectedCategory, source, searchKeyword)
  }

  const handleNewsClick = (newsItem: NewsItem) => {
    setSelectedNews(newsItem)
    setNewsDetailVisible(true)
  }

  const getCategoryColor = (category: string) => {
    const colorMap: Record<string, string> = {
      'Ë¥¢Áªè': 'blue',
      'ËÇ°Â∏Ç': 'green',
      'ÊîøÁ≠ñ': 'orange',
      'ÂÖ¨Âè∏': 'purple',
      'ÂõΩÈôÖ': 'red',
      'ÁÉ≠Èó®ËØùÈ¢ò': 'red',
      'breaking': 'red',
      'major': 'orange'
    }
    return colorMap[category] || 'default'
  }

  const getSentimentIcon = (sentiment?: { label: string; score: number }) => {
    if (!sentiment) return null

    switch (sentiment.label) {
      case 'positive': return 'üìà'
      case 'negative': return 'üìâ'
      case 'neutral': return '‚û°Ô∏è'
      case 'trending': return 'üî•'
      default: return 'üìä'
    }
  }

  const getNewsAvatar = (category: string) => {
    const iconMap: Record<string, React.ReactNode> = {
      'Ë¥¢Áªè': <TrendingUpOutlined />,
      'ËÇ°Â∏Ç': <TrendingUpOutlined />,
      'ÊîøÁ≠ñ': <ThunderboltOutlined />,
      'ÂÖ¨Âè∏': <FireOutlined />,
      'ÁÉ≠Èó®ËØùÈ¢ò': <FireOutlined />
    }
    return iconMap[category] || <ClockCircleOutlined />
  }

  const formatPublishTime = (publishTime: string) => {
    const now = new Date()
    const publishDate = new Date(publishTime)
    const diffMs = now.getTime() - publishDate.getTime()
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60))
    const diffDays = Math.floor(diffHours / 24)

    if (diffHours < 1) {
      return 'ÂàöÂàö'
    } else if (diffHours < 24) {
      return `${diffHours}Â∞èÊó∂Ââç`
    } else if (diffDays < 7) {
      return `${diffDays}Â§©Ââç`
    } else {
      return publishDate.toLocaleDateString()
    }
  }

  const categories = [
    { value: 'all', label: 'ÂÖ®ÈÉ®ÂàÜÁ±ª' },
    { value: 'Ë¥¢Áªè', label: 'Ë¥¢Áªè' },
    { value: 'ËÇ°Â∏Ç', label: 'ËÇ°Â∏Ç' },
    { value: 'ÊîøÁ≠ñ', label: 'ÊîøÁ≠ñ' },
    { value: 'ÂÖ¨Âè∏', label: 'ÂÖ¨Âè∏' },
    { value: 'ÂõΩÈôÖ', label: 'ÂõΩÈôÖ' },
    { value: 'ÁÉ≠Èó®ËØùÈ¢ò', label: 'ÁÉ≠Èó®ËØùÈ¢ò' }
  ]

  return (
    <div style={{ padding: '24px', background: '#f5f5f5', minHeight: '100vh' }}>
      <Title level={2} style={{ marginBottom: '24px' }}>
        <ThunderboltOutlined /> Êñ∞Èóª‰∏≠ÂøÉ
      </Title>

      {/* Á≠õÈÄâÂíåÊêúÁ¥¢Âå∫Âüü */}
      <Card style={{ marginBottom: '24px' }}>
        <Row gutter={[16, 16]} align="middle">
          <Col xs={24} sm={12} md={6}>
            <Space direction="vertical" style={{ width: '100%' }}>
              <Text strong>ÂàÜÁ±ªÁ≠õÈÄâ</Text>
              <Select
                value={selectedCategory}
                onChange={handleCategoryChange}
                style={{ width: '100%' }}
                placeholder="ÈÄâÊã©ÂàÜÁ±ª"
              >
                {categories.map(cat => (
                  <Option key={cat.value} value={cat.value}>
                    {cat.label}
                  </Option>
                ))}
              </Select>
            </Space>
          </Col>
          <Col xs={24} sm={12} md={6}>
            <Space direction="vertical" style={{ width: '100%' }}>
              <Text strong>Êñ∞ÈóªÊ∫ê</Text>
              <Select
                value={selectedSource}
                onChange={handleSourceChange}
                style={{ width: '100%' }}
                placeholder="ÈÄâÊã©Êñ∞ÈóªÊ∫ê"
              >
                <Option value="all">ÂÖ®ÈÉ®Êñ∞ÈóªÊ∫ê</Option>
                {sources.map(source => (
                  <Option key={source.id} value={source.name}>
                    <Badge
                      status={source.enabled ? 'success' : 'default'}
                      text={source.name}
                    />
                  </Option>
                ))}
              </Select>
            </Space>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Space direction="vertical" style={{ width: '100%' }}>
              <Text strong>ÊêúÁ¥¢Êñ∞Èóª</Text>
              <Input.Search
                placeholder="ÊêúÁ¥¢Êñ∞ÈóªÊ†áÈ¢ò„ÄÅÊëòË¶ÅÊàñÊ†áÁ≠æ"
                value={searchKeyword}
                onChange={(e) => setSearchKeyword(e.target.value)}
                onSearch={handleSearch}
                enterButton={<SearchOutlined />}
              />
            </Space>
          </Col>
          <Col xs={24} sm={12} md={4}>
            <Space>
              <Button
                icon={<ReloadOutlined />}
                onClick={() => loadNews(selectedCategory, selectedSource, searchKeyword)}
                loading={loading}
              >
                Âà∑Êñ∞
              </Button>
              <Button
                icon={<FilterOutlined />}
                onClick={() => setFilterVisible(true)}
              >
                È´òÁ∫ßÁ≠õÈÄâ
              </Button>
            </Space>
          </Col>
        </Row>
      </Card>

      {/* Êñ∞ÈóªÊ∫êÁä∂ÊÄÅ */}
      <Card
        title="Êñ∞ÈóªÊ∫êÁä∂ÊÄÅ"
        size="small"
        style={{ marginBottom: '24px' }}
        extra={<Text type="secondary">ÂÖ± {sources.length} ‰∏™Êñ∞ÈóªÊ∫ê</Text>}
      >
        <Row gutter={[16, 16]}>
          {sources.map(source => (
            <Col xs={24} sm={12} md={6} key={source.id}>
              <Card size="small">
                <Space direction="vertical" style={{ width: '100%' }}>
                  <Space>
                    <Badge status={source.enabled ? 'success' : 'default'} />
                    <Text strong>{source.name}</Text>
                  </Space>
                  <Text type="secondary" style={{ fontSize: '12px' }}>
                    ‰ºòÂÖàÁ∫ß: {source.priority} | ÊúÄÂêéÊõ¥Êñ∞: {formatPublishTime(source.last_updated)}
                  </Text>
                </Space>
              </Card>
            </Col>
          ))}
        </Row>
      </Card>

      {/* Êñ∞ÈóªÂàóË°® */}
      <Card title="ÊúÄÊñ∞Êñ∞Èóª" extra={<Text type="secondary">ÂÖ± {news.length} Êù°Êñ∞Èóª</Text>}>
        <Spin spinning={loading}>
          <List
            dataSource={news}
            renderItem={(item) => (
              <List.Item
                key={item.id}
                style={{
                  padding: '16px',
                  borderRadius: '8px',
                  marginBottom: '12px',
                  backgroundColor: '#fff',
                  border: '1px solid #f0f0f0',
                  cursor: 'pointer'
                }}
                onClick={() => handleNewsClick(item)}
                actions={[
                  <Tooltip title="Êü•ÁúãËØ¶ÊÉÖ">
                    <Button type="link" icon={<EyeOutlined />} />
                  </Tooltip>,
                  <Tooltip title="Êî∂Ëóè">
                    <Button type="link" icon={<HeartOutlined />} />
                  </Tooltip>,
                  <Tooltip title="ÂàÜ‰∫´">
                    <Button type="link" icon={<ShareAltOutlined />} />
                  </Tooltip>,
                  <Tooltip title="ËÆ¢ÈòÖÊèêÈÜí">
                    <Button type="link" icon={<BellOutlined />} />
                  </Tooltip>
                ]}
              >
                <List.Item.Meta
                  avatar={
                    <Avatar
                      style={{ backgroundColor: getCategoryColor(item.category) }}
                      icon={getNewsAvatar(item.category)}
                    />
                  }
                  title={
                    <Space>
                      <Text strong>{item.title}</Text>
                      {item.sentiment && (
                        <Tooltip title={`ÊÉÖÊÑü: ${item.sentiment.label} (${item.sentiment.score.toFixed(2)})`}>
                          <span>{getSentimentIcon(item.sentiment)}</span>
                        </Tooltip>
                      )}
                      {item.category === 'ÁÉ≠Èó®ËØùÈ¢ò' && (
                        <Tag color="red" icon={<FireOutlined />}>
                          ÁÉ≠Èó®
                        </Tag>
                      )}
                    </Space>
                  }
                  description={
                    <Space direction="vertical" style={{ width: '100%' }}>
                      <Text type="secondary">{item.summary}</Text>
                      <Space split={<Divider type="vertical" />}>
                        <Tag color={getCategoryColor(item.category)}>{item.category}</Tag>
                        <Text type="secondary" style={{ fontSize: '12px' }}>
                          {item.source}
                        </Text>
                        <Text type="secondary" style={{ fontSize: '12px' }}>
                          {formatPublishTime(item.publish_time)}
                        </Text>
                        {item.stock_codes.length > 0 && (
                          <Text type="secondary" style={{ fontSize: '12px' }}>
                            Áõ∏ÂÖ≥ËÇ°Á•®: {item.stock_codes.join(', ')}
                          </Text>
                        )}
                      </Space>
                      <div>
                        {item.tags.map(tag => (
                          <Tag key={tag} size="small" style={{ margin: '2px 4px 2px 0' }}>
                            {tag}
                          </Tag>
                        ))}
                      </div>
                    </Space>
                  }
                />
              </List.Item>
            )}
            pagination={{
              pageSize: 20,
              showSizeChanger: true,
              showQuickJumper: true,
              showTotal: (total) => `ÂÖ± ${total} Êù°Êñ∞Èóª`
            }}
          />
        </Spin>
      </Card>

      {/* Êñ∞ÈóªËØ¶ÊÉÖÊ®°ÊÄÅÊ°Ü */}
      <Modal
        title="Êñ∞ÈóªËØ¶ÊÉÖ"
        open={newsDetailVisible}
        onCancel={() => setNewsDetailVisible(false)}
        footer={[
          <Button key="close" onClick={() => setNewsDetailVisible(false)}>
            ÂÖ≥Èó≠
          </Button>,
          <Button key="original" type="primary">
            Êü•ÁúãÂéüÊñá
          </Button>
        ]}
        width={800}
      >
        {selectedNews && (
          <div>
            <Title level={3}>{selectedNews.title}</Title>
            <Space split={<Divider type="vertical" />} style={{ marginBottom: '16px' }}>
              <Text>Êù•Ê∫ê: {selectedNews.source}</Text>
              <Text>‰ΩúËÄÖ: {selectedNews.author}</Text>
              <Text>ÂèëÂ∏ÉÊó∂Èó¥: {new Date(selectedNews.publish_time).toLocaleString()}</Text>
              <Tag color={getCategoryColor(selectedNews.category)}>
                {selectedNews.category}
              </Tag>
            </Space>
            <Paragraph>{selectedNews.content}</Paragraph>
            {selectedNews.stock_codes.length > 0 && (
              <div style={{ marginTop: '16px' }}>
                <Text strong>Áõ∏ÂÖ≥ËÇ°Á•®: </Text>
                <Space>
                  {selectedNews.stock_codes.map(code => (
                    <Tag key={code} color="blue">
                      {code}
                    </Tag>
                  ))}
                </Space>
              </div>
            )}
            <div style={{ marginTop: '16px' }}>
              <Text strong>Ê†áÁ≠æ: </Text>
              <Space wrap>
                {selectedNews.tags.map(tag => (
                  <Tag key={tag}>
                    {tag}
                  </Tag>
                ))}
              </Space>
            </div>
          </div>
        )}
      </Modal>
    </div>
  )
}

export default NewsHub