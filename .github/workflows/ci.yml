name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm ci

      - name: Install Python dependencies
        run: |
          cd backend
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Frontend Lint
        run: |
          cd frontend
          npm run lint

      - name: Backend Lint
        run: |
          cd backend
          source venv/bin/activate
          flake8 .
          black --check .
          isort --check-only .

      - name: TypeScript Check
        run: |
          cd frontend
          npm run type-check

      - name: Python Type Check
        run: |
          cd backend
          source venv/bin/activate
          mypy .

  # 前端测试
  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run tests
        run: |
          cd frontend
          npm run test

      - name: Build frontend
        run: |
          cd frontend
          npm run build

  # 后端测试
  backend-tests:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        run: |
          cd backend
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          cd backend
          source venv/bin/activate
          pytest
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Docker构建测试
  docker-build:
    runs-on: ubuntu-latest
    needs: [code-quality, frontend-tests, backend-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          docker-compose build

      - name: Test Docker containers
        run: |
          docker-compose up -d
          sleep 30
          docker-compose ps
          curl -f http://localhost:8000/health || exit 1
          docker-compose down

  # 部署到测试环境 (仅main分支)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [code-quality, frontend-tests, backend-tests, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # 这里添加实际的部署脚本

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # 这里添加烟雾测试

  # 创建发布版本 (仅main分支且是tag)
  create-release:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build release artifacts
        run: |
          cd frontend
          npm ci
          npm run tauri build

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: frontend/src-tauri/target/release/bundle/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}